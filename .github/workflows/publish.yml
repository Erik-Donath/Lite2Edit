name: Build and Publish Release

on:
  release:
    types: [published]

concurrency:
  group: publish-${{ github.event.release.tag_name }}
  cancel-in-progress: false

env:
  JAVA_VERSION: 17
  MINECRAFT_VERSIONS: '["1.20.2", "1.20.4", "1.20.5", "1.20.6", "1.21", "1.21.1", "1.21.3", "1.21.4", "1.21.5", "1.21.6", "1.21.7", "1.21.8", "1.21.9", "1.21.10"]'
  DEFAULT_MC_VERSION: "1.20.4"

jobs:
  extract-metadata:
    name: Extract Metadata
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      readme: ${{ steps.readme.outputs.readme }}
      minecraft_versions: ${{ env.MINECRAFT_VERSIONS }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Extract version from release tag
        id: version
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Using version: $VERSION"

      - name: Extract changelog
        id: changelog
        run: |
          CHANGELOG=$(./gradlew -q printChangelog -Pmod_version=${{ steps.version.outputs.version }} | tail -n +2)
          echo "changelog<<EOF" >> "$GITHUB_OUTPUT"
          echo "$CHANGELOG" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Extract README content
        id: readme
        run: |
          if [[ -f "README.md" ]]; then
            README_CONTENT=$(head -c 2000 README.md)
            echo "readme<<EOF" >> "$GITHUB_OUTPUT"
            echo "$README_CONTENT" >> "$GITHUB_OUTPUT"
            echo "EOF" >> "$GITHUB_OUTPUT"
          else
            echo "readme=Lite2Edit - WorldEdit Litematica Integration" >> "$GITHUB_OUTPUT"
          fi

  build:
    name: Build Mod JARs
    needs: extract-metadata
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        minecraft_version: ${{ fromJson(needs.extract-metadata.outputs.minecraft_versions) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build mod JAR for Minecraft ${{ matrix.minecraft_version }}
        run: |
          ./gradlew clean remapJar \
            -Pmod_version=${{ needs.extract-metadata.outputs.version }} \
            -Pminecraft_version=${{ matrix.minecraft_version }} \
            --no-daemon

      - name: Rename JAR with proper versioning
        run: |
          cd build/libs
          # Find the generated JAR (should be lite2edit-{version}.jar)
          ORIGINAL_JAR=$(find . -name "lite2edit-*.jar" -not -name "*-sources.jar" | head -1)
          if [ -n "$ORIGINAL_JAR" ]; then
            # Rename to include MC version
            NEW_NAME="lite2edit-fabric-${{ matrix.minecraft_version }}-${{ needs.extract-metadata.outputs.version }}.jar"
            mv "$ORIGINAL_JAR" "$NEW_NAME"
            echo "Renamed $ORIGINAL_JAR to $NEW_NAME"
            ls -la
          else
            echo "Error: No JAR file found!"
            ls -la
            exit 1
          fi

      - name: Upload mod JARs for ${{ matrix.minecraft_version }}
        uses: actions/upload-artifact@v4
        with:
          name: build-mc${{ matrix.minecraft_version }}
          path: build/libs/lite2edit-fabric-${{ matrix.minecraft_version }}-${{ needs.extract-metadata.outputs.version }}.jar
          retention-days: 1

  attach-to-release:
    name: Attach JARs to Release
    needs: [extract-metadata, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all mod JARs
        uses: actions/download-artifact@v4
        with:
          pattern: build-mc*
          merge-multiple: true

      - name: List downloaded JAR files
        run: |
          echo "Downloaded mod JARs:"
          find . -name "*.jar" -type f | sort
          echo "File details:"
          ls -la *.jar

      - name: Verify JAR files are valid
        run: |
          for jar in *.jar; do
            if [ -f "$jar" ]; then
              echo "Checking $jar:"
              file "$jar"
              unzip -t "$jar" > /dev/null 2>&1 && echo "  ✓ Valid ZIP archive" || echo "  ✗ Invalid ZIP archive"
              echo "  Size: $(stat -c%s "$jar") bytes"
            fi
          done

      - name: Attach all mod JARs to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event.release.tag_name }}
          files: "lite2edit-fabric-*.jar"
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_unmatched_files: true

  publish-modrinth:
    name: Publish to Modrinth
    needs: [extract-metadata, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all mod JARs
        uses: actions/download-artifact@v4
        with:
          pattern: build-mc*
          merge-multiple: true

      - name: Generate files and game versions from downloaded JARs
        id: generate-files
        run: |
          echo "=== Generating file list and game versions from JAR files ==="
          
          # Find all JAR files and sort them
          JAR_FILES=$(find . -name "lite2edit-fabric-*.jar" -type f | sort)
          
          if [ -z "$JAR_FILES" ]; then
            echo "Error: No JAR files found!"
            exit 1
          fi
          
          echo "Found JAR files:"
          echo "$JAR_FILES"
          
          # Generate files list (one per line)
          FILES_LIST=""
          GAME_VERSIONS=""
          
          for jar in $JAR_FILES; do
            # Remove ./ prefix if present
            jar_clean=${jar#./}
            FILES_LIST="${FILES_LIST}${jar_clean}"$'\n'
          
            # Extract MC version from filename: lite2edit-fabric-1.20.4-0.4.jar -> 1.20.4
            if [[ $jar_clean =~ lite2edit-fabric-([0-9]+\.[0-9]+\.?[0-9]*)-.*\.jar ]]; then
              MC_VERSION=${BASH_REMATCH[1]}
              GAME_VERSIONS="${GAME_VERSIONS}${MC_VERSION}"$'\n'
              echo "Extracted MC version: $MC_VERSION from $jar_clean"
            else
              echo "Warning: Could not extract MC version from $jar_clean"
            fi
          done
          
          # Remove trailing newlines
          FILES_LIST=$(echo "$FILES_LIST" | sed '/^$/d')
          GAME_VERSIONS=$(echo "$GAME_VERSIONS" | sed '/^$/d')
          
          echo "=== Generated Files List ==="
          echo "$FILES_LIST"
          echo "=== Generated Game Versions ==="
          echo "$GAME_VERSIONS"
          
          # Set outputs
          echo "files<<EOF" >> "$GITHUB_OUTPUT"
          echo "$FILES_LIST" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
          
          echo "game_versions<<EOF" >> "$GITHUB_OUTPUT"
          echo "$GAME_VERSIONS" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Publish single version with multiple files to Modrinth
        uses: Kir-Antipov/mc-publish@v3.3
        with:
          modrinth-id: ${{ secrets.MODRINTH_ID }}
          modrinth-token: ${{ secrets.MODRINTH_TOKEN }}
          name: "Lite2Edit ${{ needs.extract-metadata.outputs.version }}"
          version: ${{ needs.extract-metadata.outputs.version }}
          changelog: ${{ needs.extract-metadata.outputs.changelog }}
          files: ${{ steps.generate-files.outputs.files }}
          game-versions: ${{ steps.generate-files.outputs.game_versions }}
          loaders: fabric
          dependencies: |
            fabric-language-kotlin(required)
            worldedit(required)
          version-type: release

  publish-github-packages:
    name: Publish to GitHub Packages
    needs: extract-metadata
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        minecraft_version: ${{ fromJson(needs.extract-metadata.outputs.minecraft_versions) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: temurin

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build and publish to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          ./gradlew publish \
            -Pmod_version=${{ needs.extract-metadata.outputs.version }} \
            -Pminecraft_version=${{ matrix.minecraft_version }} \
            --no-daemon
