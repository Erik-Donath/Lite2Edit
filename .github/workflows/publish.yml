name: Build and Publish Release

on:
  release:
    types: [published]

env:
  JAVA_VERSION: 21
  MINECRAFT_VERSIONS: '["1.20.2", "1.20.4", "1.20.5", "1.20.6", "1.21", "1.21.1", "1.21.3", "1.21.4", "1.21.5", "1.21.6", "1.21.7", "1.21.8", "1.21.9", "1.21.10"]'
  DEFAULT_MC_VERSION: "1.20.4"

jobs:
  extract-metadata:
    name: Extract Metadata
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      readme: ${{ steps.readme.outputs.readme }}
      minecraft_versions: ${{ env.MINECRAFT_VERSIONS }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Extract version from release tag
        id: version
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate POM and extract metadata
        run: |
          ./gradlew generatePomFileForMavenPublication \
            -Pmod_version=${{ steps.version.outputs.version }} \
            -Pminecraft_version=${{ env.DEFAULT_MC_VERSION }}

      - name: Extract changelog
        id: changelog
        run: |
          CHANGELOG=$(./gradlew -q printChangelog -Pmod_version=${{ steps.version.outputs.version }} | tail -n +2)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Extract README content
        id: readme
        run: |
          if [[ -f "README.md" ]]; then
            README_CONTENT=$(head -c 2000 README.md)
            echo "readme<<EOF" >> $GITHUB_OUTPUT
            echo "$README_CONTENT" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "readme=Lite2Edit - WorldEdit Litematica Integration" >> $GITHUB_OUTPUT
          fi

  build:
    name: Build All Versions
    needs: extract-metadata
    runs-on: ubuntu-latest

    strategy:
      matrix:
        minecraft_version: ${{ fromJson(needs.extract-metadata.outputs.minecraft_versions) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build for Minecraft ${{ matrix.minecraft_version }}
        run: |
          ./gradlew build publishToMavenLocal \
            -Pmod_version=${{ needs.extract-metadata.outputs.version }} \
            -Pminecraft_version=${{ matrix.minecraft_version }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-mc${{ matrix.minecraft_version }}
          path: |
            build/libs/
            build/publications/maven/
          retention-days: 7

  attach-to-release:
    name: Attach JARs to Release
    needs: [extract-metadata, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-mc*
          merge-multiple: true

      - name: Attach JAR files to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for jar in build/libs/*.jar; do
            if [[ "$jar" != *"-sources.jar" ]] && [[ "$jar" != *"-dev.jar" ]]; then
              echo "Uploading $jar to release"
              gh release upload ${{ github.event.release.tag_name }} "$jar" --clobber
            fi
          done

  publish-modrinth:
    name: Publish to Modrinth
    needs: [extract-metadata, build]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-mc*
          merge-multiple: true

      - name: Convert matrix to game-versions
        id: game-versions
        run: |
          VERSIONS=$(echo '${{ needs.extract-metadata.outputs.minecraft_versions }}' | jq -r '.[]')
          echo "versions<<EOF" >> $GITHUB_OUTPUT
          echo "$VERSIONS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Publish to Modrinth
        uses: Kir-Antipov/mc-publish@v3.3
        with:
          modrinth-id: ${{ secrets.MODRINTH_ID }}
          modrinth-token: ${{ secrets.MODRINTH_TOKEN }}

          name: "Lite2Edit ${{ needs.extract-metadata.outputs.version }}"
          version: ${{ needs.extract-metadata.outputs.version }}
          changelog: ${{ needs.extract-metadata.outputs.changelog }}

          files: |
            build/libs/!(*-sources.jar|*-dev.jar)

          game-versions: ${{ steps.game-versions.outputs.versions }}

          loaders: |
            fabric

          dependencies: |
            fabric-language-kotlin | depends | *
            worldedit | depends | *

          version-type: release

  publish-github-packages:
    name: Publish to GitHub Packages
    needs: [extract-metadata, build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        minecraft_version: ${{ fromJson(needs.extract-metadata.outputs.minecraft_versions) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Download artifacts for MC ${{ matrix.minecraft_version }}
        uses: actions/download-artifact@v4
        with:
          name: build-mc${{ matrix.minecraft_version }}

      - name: Publish to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          ./gradlew publish \
            -Pmod_version=${{ needs.extract-metadata.outputs.version }} \
            -Pminecraft_version=${{ matrix.minecraft_version }}
