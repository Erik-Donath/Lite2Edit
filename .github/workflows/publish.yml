name: Publish (Manual, requires CI success)

# Manual dispatch by a human. Before publishing we verify that the CI workflow for master
# has a successful run for the commit being published (or the latest master run).
on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'Release version to publish (e.g. 1.2.3)'
        required: true
      commit_sha:
        description: '(optional) commit SHA to validate CI succeeded for. If omitted, the latest CI run on master is checked.'
        required: false

permissions:
  contents: write
  packages: write

concurrency:
  group: publish-${{ github.repository }}-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      RELEASE_VERSION: ${{ inputs.release_version }}

    steps:
      - name: Ensure recent CI run for master succeeded
        id: check_ci
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const workflowFile = 'ci.yml'; // workflow filename for CI
            const commitSha = inputs.commit_sha || '';
            // List workflow runs for the CI workflow on branch master
            const runsResp = await github.rest.actions.listWorkflowRuns({
              owner,
              repo,
              workflow_id: workflowFile,
              branch: 'master',
              per_page: 20
            });
            const runs = runsResp.data.workflow_runs || [];
            if (runs.length === 0) {
              core.setFailed('No CI workflow runs found for master.');
              return;
            }
            let matchedRun = null;
            if (commitSha) {
              matchedRun = runs.find(r => r.head_sha === commitSha);
              if (!matchedRun) {
                core.setFailed(`No CI run found for commit ${commitSha} on master.`);
                return;
              }
            } else {
              // pick the latest run on master
              matchedRun = runs[0];
            }
            core.info(`Found CI run id=${matchedRun.id} head_sha=${matchedRun.head_sha} conclusion=${matchedRun.conclusion}`);
            if (matchedRun.conclusion !== 'success') {
              core.setFailed(`CI run for commit ${matchedRun.head_sha} did not succeed (conclusion=${matchedRun.conclusion}). Aborting publish.`);
              return;
            }
            core.setOutput('ci_run_id', matchedRun.id);

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --tags --prune

      - name: Set up JDK 17 and cache Gradle
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: 'gradle'

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Print resolved version (sanity check)
        run: ./gradlew -PreleaseVersion=${{ env.RELEASE_VERSION }} printVersion

      - name: Build (assemble and run tests)
        run: ./gradlew --no-daemon clean build --stacktrace -PreleaseVersion=${{ env.RELEASE_VERSION }}

      - name: Publish to GitHub Packages (Maven)
        env:
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
        run: ./gradlew --no-daemon publish --stacktrace -PreleaseVersion=${RELEASE_VERSION}